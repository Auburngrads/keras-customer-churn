LogTotalCharges = log(TotalCharges)
) %>%
correlate() %>%
focus(Churn) %>%
fashion()
# Create recipe
rec_obj <- recipe(Churn ~ ., data = train_tbl) %>%
step_discretize(tenure, options = list(cuts = 6)) %>%
step_log(TotalCharges) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_center(all_predictors(), -all_outcomes()) %>%
step_scale(all_predictors(), -all_outcomes()) %>%
prep(data = train_tbl)
x_train_tbl <- bake(rec_obj, newdata = train_tbl) %>% select(-Churn)
x_test_tbl  <- bake(rec_obj, newdata = test_tbl) %>% select(-Churn)
y_train_vec <- ifelse(pull(train_tbl, Churn) == 'Yes', 1, 0)
y_test_vec  <- ifelse(pull(test_tbl, Churn) == 'Yes', 1, 0)
# Building our Artificial Neural Network
model_keras <- keras_model_sequential()
model_keras %>%
# First hidden layer
layer_dense(
units              = 16,
kernel_initializer = "uniform",
activation         = "relu",
input_shape        = ncol(x_train_tbl)) %>%
# Dropout to prevent overfitting
layer_dropout(rate = 0.1) %>%
# Second hidden layer
layer_dense(
units              = 16,
kernel_initializer = "uniform",
activation         = "relu") %>%
# Dropout to prevent overfitting
layer_dropout(rate = 0.1) %>%
# Output layer
layer_dense(
units              = 1,
kernel_initializer = "uniform",
activation         = "sigmoid") %>%
# Compile ANN
compile(
optimizer = 'adam',
loss      = 'binary_crossentropy',
metrics   = c('accuracy')
)
model_keras
# Fit the keras model to the training data
fit_keras <- fit(
object           = model_keras,
x                = as.matrix(x_train_tbl),
y                = y_train_vec,
batch_size       = 50,
epochs           = 35,
validation_split = 0.30,
verbose = 0
)
fit_keras
plot(fit_keras) +
theme_tq() +
scale_color_tq() +
scale_fill_tq() +
labs(title = "Deep Learning Training Results")
# Predicted Class
yhat_keras_class_vec <- predict_classes(object = model_keras, x = as.matrix(x_test_tbl)) %>%
as.vector()
# Predicted Class Probability
yhat_keras_prob_vec  <- predict_proba(object = model_keras, x = as.matrix(x_test_tbl)) %>%
as.vector()
# Format test data and predictions for yardstick metrics
estimates_keras_tbl <- tibble(
truth      = as.factor(y_test_vec) %>% fct_recode(yes = "1", no = "0"),
estimate   = as.factor(yhat_keras_class_vec) %>% fct_recode(yes = "1", no = "0"),
class_prob = yhat_keras_prob_vec
)
save(list = ls(), file = 'keras_model_init.RData')
rm(list = ls())
load('keras_model_init.RData')
runApp()
yhat_keras_class_vec <- predict_classes(object = model_keras, x = as.matrix(x_test_tbl)) %>%
as.vector()
rm(list = ls())
library(keras)
library(lime)
library(tidyquant)
library(rsample)
library(recipes)
library(yardstick)
library(corrr)
setwd('~/Documents/midnightBarber/bizsci/keras-customer-churn/')
# install_keras()
churn_data_raw <- read_csv("WA_Fn-UseC_-Telco-Customer-Churn.csv")
# Remove unnecessary data
churn_data_tbl <- churn_data_raw %>%
# select(-customerID) %>%
drop_na() %>%
select(Churn, everything())
# Split test/training sets
set.seed(100)
train_test_split <- initial_split(churn_data_tbl, prop = 0.8)
train_test_split
# Retrieve train and test sets
train_tbl_with_ids <- training(train_test_split)
test_tbl_with_ids  <- testing(train_test_split)
train_tbl <- select(train_tbl_with_ids, -customerID)
test_tbl <- select(test_tbl_with_ids, -customerID)
# Determine if log transformation improves correlation
# between TotalCharges and Churn
train_tbl %>%
select(Churn, TotalCharges) %>%
mutate(
Churn = Churn %>% as.factor() %>% as.numeric(),
LogTotalCharges = log(TotalCharges)
) %>%
correlate() %>%
focus(Churn) %>%
fashion()
# Create recipe
rec_obj <- recipe(Churn ~ ., data = train_tbl) %>%
step_discretize(tenure, options = list(cuts = 6)) %>%
step_log(TotalCharges) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_center(all_predictors(), -all_outcomes()) %>%
step_scale(all_predictors(), -all_outcomes()) %>%
prep(data = train_tbl)
x_train_tbl <- bake(rec_obj, newdata = train_tbl) %>% select(-Churn)
x_test_tbl  <- bake(rec_obj, newdata = test_tbl) %>% select(-Churn)
y_train_vec <- ifelse(pull(train_tbl, Churn) == 'Yes', 1, 0)
y_test_vec  <- ifelse(pull(test_tbl, Churn) == 'Yes', 1, 0)
# Building our Artificial Neural Network
model_keras <- keras_model_sequential()
model_keras %>%
# First hidden layer
layer_dense(
units              = 16,
kernel_initializer = "uniform",
activation         = "relu",
input_shape        = ncol(x_train_tbl)) %>%
# Dropout to prevent overfitting
layer_dropout(rate = 0.1) %>%
# Second hidden layer
layer_dense(
units              = 16,
kernel_initializer = "uniform",
activation         = "relu") %>%
# Dropout to prevent overfitting
layer_dropout(rate = 0.1) %>%
# Output layer
layer_dense(
units              = 1,
kernel_initializer = "uniform",
activation         = "sigmoid") %>%
# Compile ANN
compile(
optimizer = 'adam',
loss      = 'binary_crossentropy',
metrics   = c('accuracy')
)
model_keras
# Fit the keras model to the training data
fit_keras <- fit(
object           = model_keras,
x                = as.matrix(x_train_tbl),
y                = y_train_vec,
batch_size       = 50,
epochs           = 35,
validation_split = 0.30,
verbose = 0
)
fit_keras
plot(fit_keras) +
theme_tq() +
scale_color_tq() +
scale_fill_tq() +
labs(title = "Deep Learning Training Results")
# Predicted Class
yhat_keras_class_vec <- predict_classes(object = model_keras, x = as.matrix(x_test_tbl)) %>%
as.vector()
# Predicted Class Probability
yhat_keras_prob_vec  <- predict_proba(object = model_keras, x = as.matrix(x_test_tbl)) %>%
as.vector()
# Format test data and predictions for yardstick metrics
estimates_keras_tbl <- tibble(
truth      = as.factor(y_test_vec) %>% fct_recode(yes = "1", no = "0"),
estimate   = as.factor(yhat_keras_class_vec) %>% fct_recode(yes = "1", no = "0"),
class_prob = yhat_keras_prob_vec
)
?save_model_hdf5
save_model_hdf5(model_keras, '', overwrite = TRUE,
include_optimizer = TRUE)
save_model_hdf5(model_keras, 'model_keras_init.hdf5', overwrite = TRUE,
include_optimizer = TRUE)
rm(list = ls())
ls()
list.dirs()
list.files()
load_model_hdf5('model_keras_init.hdf5', custom_objects = NULL, compile = TRUE)
fit_keras <- fit(
object           = model_keras,
x                = as.matrix(x_train_tbl),
y                = y_train_vec,
batch_size       = 50,
epochs           = 35,
validation_split = 0.30,
verbose = 0
)
model_keras <- load_model_hdf5('model_keras_init.hdf5', custom_objects = NULL, compile = TRUE)
runApp()
runApp()
runApp()
yhat_keras_class_vec <- predict_classes(object = model_keras, x = as.matrix(x_test_tbl)) %>%
as.vector()
yhat_keras_class_vec
yhat_keras_prob_vec  <- predict_proba(object = model_keras, x = as.matrix(x_test_tbl)) %>%
as.vector()
estimates_keras_tbl <- tibble(
truth      = as.factor(y_test_vec) %>% fct_recode(yes = '1', no = '0'),
estimate   = as.factor(yhat_keras_class_vec) %>% fct_recode(yes = '1', no = '0'),
class_prob = yhat_keras_prob_vec
)
tibble(
Accuracy = estimates_keras_tbl %>% metrics(truth, estimate) %>% .[[1]],
AUC = estimates_keras_tbl %>% roc_auc(truth, class_prob) %>% .[[1]],
Precision = estimates_keras_tbl %>% precision(truth, estimate) %>% .[[1]],
Recall = estimates_keras_tbl %>% recall(truth, estimate) %>% .[[1]],
`F1 Statistic` = estimates_keras_tbl %>% f_meas(truth, estimate, beta = 1) %>% .[[1]]
)
runApp()
?ignoreNull
library(shiny)
?ignoreNULL
?observeEvent
runApp()
runApp()
runApp()
runApp()
x_train_tbl
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
theme_tq()
theme_tq
billboarder
?bb_barchart
runApp()
theme_tq()
theme_tq
runApp()
churn_data_raw
runApp()
plot_df
billboarder() %>%
bb_barchart(
data = plot_df,
mapping = bbaes(x = tenure_range, y = pct, group = Churn),
stacked = TRUE,
rotated = TRUE
) %>%
bb_colors_manual('Yes' = '#2c3e50', 'No' = '#18BC9C') %>%
bb_title(text = 'Churn Rate by Tenure Range')
billboarder() %>%
bb_barchart(
data = plot_df,
mapping = bbaes(x = tenure_range, y = pct, group = Churn),
stacked = TRUE,
rotated = TRUE
) %>%
bb_colors_manual('Yes' = '#2c3e50', 'No' = '#18BC9C') %>%
bb_title(text = 'Churn Rate by Tenure Range')
billboarder() %>%
bb_barchart(
data = plot_df,
# mapping = bbaes(x = tenure_range, y = pct, group = Churn),
stacked = TRUE,
rotated = TRUE
) %>%
bb_colors_manual('Yes' = '#2c3e50', 'No' = '#18BC9C') %>%
bb_title(text = 'Churn Rate by Tenure Range')
plot_df
plot_df <- plot_df %>%
select(-n) %>%
mutate(x = 'Churn') %>%
spread(Churn, pct)
billboarder() %>%
bb_barchart(
data = plot_df,
# mapping = bbaes(x = tenure_range, y = pct, group = Churn),
stacked = TRUE,
rotated = TRUE
) %>%
bb_colors_manual('Yes' = '#2c3e50', 'No' = '#18BC9C') %>%
bb_title(text = 'Churn Rate by Tenure Range')
plot_df <- plot_df %>%
select(-n) %>%
# mutate(x = 'Churn') %>%
spread(Churn, pct)
plot_df
plot_df$x <- NULL
billboarder() %>%
bb_barchart(
data = plot_df,
# mapping = bbaes(x = tenure_range, y = pct, group = Churn),
stacked = TRUE,
rotated = TRUE
) %>%
bb_colors_manual('Yes' = '#2c3e50', 'No' = '#18BC9C') %>%
bb_title(text = 'Churn Rate by Tenure Range')
billboarder() %>%
# bb_barchart(
#     data = plot_df,
#     # mapping = bbaes(x = tenure_range, y = pct, group = Churn),
#     stacked = TRUE,
#     rotated = TRUE
# ) %>%
bb_colors_manual('Yes' = '#2c3e50', 'No' = '#18BC9C') %>%
bb_title(text = 'Churn Rate by Tenure Range')
plot <- billboarder() %>%
# bb_barchart(
#     data = plot_df,
#     # mapping = bbaes(x = tenure_range, y = pct, group = Churn),
#     stacked = TRUE,
#     rotated = TRUE
# ) %>%
bb_colors_manual('Yes' = '#2c3e50', 'No' = '#18BC9C') %>%
bb_title(text = 'Churn Rate by Tenure Range')
plot %>%
bb_barchart(
data = plot_df,
# mapping = bbaes(x = tenure_range, y = pct, group = Churn),
stacked = TRUE,
rotated = TRUE
)
plot %>%
bb_barchart(
data = plot_df,
mapping = bbaes(x = tenure_range, y = pct, group = Churn),
stacked = TRUE,
rotated = TRUE
)
plot %>%
bb_barchart(
data = plot_df,
stacked = TRUE,
rotated = TRUE
)
runApp()
runApp()
plot_df
billboarder() %>%
bb_barchart(
data = plot_df,
stacked = TRUE,
rotated = TRUE
) %>%
bb_colors_manual('Yes' = '#2c3e50', 'No' = '#18BC9C') %>%
bb_title(text = '% Monthly Revenue')
billboarder() %>%
bb_barchart(
data = plot_df,
stacked = TRUE,
rotated = TRUE
) %>%
bb_colors_manual('Yes' = '#2c3e50', 'No' = '#18BC9C') %>%
bb_title(text = '% Monthly Revenue')
runApp()
plot_df
churn_data_raw %>%
head
runApp()
churn_data_raw$monthly_charge_range
churn_data_raw %>%
group_by(Churn) %>%
summarise(monthly_revenue = sum(MonthlyCharges)) %>%
ungroup %>%
mutate(pct = round(monthly_revenue / sum(monthly_revenue), 2)) %>%
select(-monthly_revenue) %>%
mutate(x = 'Churn') %>%
spread(Churn, pct)
churn_data_raw %>%
filter(monthly_charge_range == '< 20 per Month') %>%
group_by(Churn) %>%
summarise(monthly_revenue = sum(MonthlyCharges)) %>%
ungroup %>%
mutate(pct = round(monthly_revenue / sum(monthly_revenue), 2)) %>%
select(-monthly_revenue) %>%
mutate(x = 'Churn') %>%
spread(Churn, pct)
plot_df <-
# churn_analysis_data() %>%
churn_data_raw %>%
filter(monthly_charge_range == '< 20 per Month') %>%
group_by(Churn) %>%
summarise(monthly_revenue = sum(MonthlyCharges)) %>%
ungroup %>%
mutate(pct = round(monthly_revenue / sum(monthly_revenue), 2)) %>%
select(-monthly_revenue) %>%
mutate(x = 'Churn') %>%
spread(Churn, pct)
billboarder() %>%
bb_barchart(
data = plot_df,
stacked = TRUE,
rotated = TRUE
) %>%
bb_colors_manual('Yes' = '#2c3e50', 'No' = '#18BC9C') %>%
bb_title(text = '% Monthly Revenue')
plot_df <-
# churn_analysis_data() %>%
churn_data_raw %>%
# filter(monthly_charge_range == '< 20 per Month') %>%
group_by(Churn) %>%
summarise(monthly_revenue = sum(MonthlyCharges)) %>%
ungroup %>%
mutate(pct = round(monthly_revenue / sum(monthly_revenue), 2)) %>%
select(-monthly_revenue) %>%
mutate(x = 'Churn') %>%
spread(Churn, pct)
billboarder() %>%
bb_barchart(
data = plot_df,
stacked = TRUE,
rotated = TRUE
) %>%
bb_colors_manual('Yes' = '#2c3e50', 'No' = '#18BC9C') %>%
bb_title(text = '% Monthly Revenue')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
churn_data_raw %>%
filter(monthly_charge_range == 'Over 100 per Month')
churn_data_raw %>%
filter(monthly_charge_range == 'Over 100 per Month',
TechSupport == 'No internet service')
churn_data_raw %>%
filter(monthly_charge_range == 'Over 100 per Month',
TechSupport == 'No internet service') %>%
group_by(Churn) %>%
summarise(monthly_revenue = sum(MonthlyCharges)) %>%
ungroup %>%
mutate(pct = round(monthly_revenue / sum(monthly_revenue), 2)) %>%
select(-monthly_revenue) %>%
mutate(x = 'Churn') %>%
spread(Churn, pct)
churn_data_raw %>%
filter(monthly_charge_range == 'Over 100 per Month',
TechSupport == 'No internet service') %>%
group_by(Churn) %>%
summarise(monthly_revenue = sum(MonthlyCharges)) %>%
ungroup %>%
mutate(pct = round(monthly_revenue / sum(monthly_revenue), 2)) %>%
select(-monthly_revenue) %>%
mutate(x = 'Churn')
billboarderProxy('pct_monthly_revenue') %>%
bb_barchart(
data = data.frame(),
stacked = TRUE,
rotated = TRUE
) %>%
bb_colors_manual('Yes' = '#2c3e50', 'No' = '#18BC9C') %>%
bb_title(text = '% Monthly Revenue')
bb_barchart(
data = data.frame(),
stacked = TRUE,
rotated = TRUE
) %>%
bb_colors_manual('Yes' = '#2c3e50', 'No' = '#18BC9C') %>%
bb_title(text = '% Monthly Revenue')
billboarder() %>%
bb_barchart(
data = data.frame(),
stacked = TRUE,
rotated = TRUE
) %>%
bb_colors_manual('Yes' = '#2c3e50', 'No' = '#18BC9C') %>%
bb_title(text = '% Monthly Revenue')
billboarder() %>%
bb_barchart(
data = data.frame(x = '', y = ''),
stacked = TRUE,
rotated = TRUE
)
billboarder() %>%
bb_barchart(
data = data.frame(x = ''),
stacked = TRUE,
rotated = TRUE
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(vb)
vbPeek('analytics.general_events')
vbPeek('analytics.sessions_v2')
vbPeek('analytics.searches')
vbPeek('analytics.stock_item_events')
3409/60
runApp()
runApp()
